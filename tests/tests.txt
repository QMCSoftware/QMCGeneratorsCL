>>> import qmcseqcl
>>> import numpy as np

>>> print(qmcseqcl.lattice_linear.__doc__)
Lattice points in linear ordering
<BLANKLINE>
Args:
    r (np.uint64): replications
    n (np.uint64): points
    d (np.uint64): dimension
    g (np.ndarray of np.uint64): pointer to generating vector of size r*d
    x (np.ndarray of np.double): pointer to point storage of size r*n*d
>>> g = np.array([
...     [1,433461,315689,441789,501101],
...     [1,182667,469891,498753,110745]],
...     dtype=np.uint64)
>>> r = np.uint64(g.shape[0]) 
>>> n = np.uint64(8) 
>>> d = np.uint64(g.shape[1])
>>> x = np.empty((r,n,d),dtype=np.float64)
>>> time_perf,time_process = qmcseqcl.lattice_linear(r,n,d,g,x,**kwargs)
>>> x
array([[[0.   , 0.   , 0.   , 0.   , 0.   ],
        [0.125, 0.625, 0.125, 0.625, 0.625],
        [0.25 , 0.25 , 0.25 , 0.25 , 0.25 ],
        [0.375, 0.875, 0.375, 0.875, 0.875],
        [0.5  , 0.5  , 0.5  , 0.5  , 0.5  ],
        [0.625, 0.125, 0.625, 0.125, 0.125],
        [0.75 , 0.75 , 0.75 , 0.75 , 0.75 ],
        [0.875, 0.375, 0.875, 0.375, 0.375]],
<BLANKLINE>
       [[0.   , 0.   , 0.   , 0.   , 0.   ],
        [0.125, 0.375, 0.375, 0.125, 0.125],
        [0.25 , 0.75 , 0.75 , 0.25 , 0.25 ],
        [0.375, 0.125, 0.125, 0.375, 0.375],
        [0.5  , 0.5  , 0.5  , 0.5  , 0.5  ],
        [0.625, 0.875, 0.875, 0.625, 0.625],
        [0.75 , 0.25 , 0.25 , 0.75 , 0.75 ],
        [0.875, 0.625, 0.625, 0.875, 0.875]]])
>>> print(qmcseqcl.lattice_b2.__doc__)
Lattice points in Graycode or natural ordering
<BLANKLINE>
Args:
    r (np.uint64): replications
    n (np.uint64): points
    d (np.uint64): dimension
    nstart (np.uint64): starting index in sequence
    gc (np.uint8): flag to use Graycode or natural order
    g (np.ndarray of np.uint64): pointer to generating vector of size r*d 
    x (np.ndarray of np.double): pointer to point storage of size r*n*d
>>> nstart = np.uint64(2)
>>> n = np.uint64(6) 
>>> x = np.empty((r,n,d),dtype=np.float64)
>>> gc = np.uint8(False)
>>> time_perf,time_process = qmcseqcl.lattice_b2(r,n,d,nstart,gc,g,x,**kwargs)
>>> x
array([[[0.25 , 0.25 , 0.25 , 0.25 , 0.25 ],
        [0.75 , 0.75 , 0.75 , 0.75 , 0.75 ],
        [0.125, 0.625, 0.125, 0.625, 0.625],
        [0.625, 0.125, 0.625, 0.125, 0.125],
        [0.375, 0.875, 0.375, 0.875, 0.875],
        [0.875, 0.375, 0.875, 0.375, 0.375]],
<BLANKLINE>
       [[0.25 , 0.75 , 0.75 , 0.25 , 0.25 ],
        [0.75 , 0.25 , 0.25 , 0.75 , 0.75 ],
        [0.125, 0.375, 0.375, 0.125, 0.125],
        [0.625, 0.875, 0.875, 0.625, 0.625],
        [0.375, 0.125, 0.125, 0.375, 0.375],
        [0.875, 0.625, 0.625, 0.875, 0.875]]])
>>> gc = np.uint8(True)
>>> time_perf,time_process = qmcseqcl.lattice_b2(r,n,d,nstart,gc,g,x,**kwargs)
>>> x
array([[[0.75 , 0.75 , 0.75 , 0.75 , 0.75 ],
        [0.25 , 0.25 , 0.25 , 0.25 , 0.25 ],
        [0.375, 0.875, 0.375, 0.875, 0.875],
        [0.875, 0.375, 0.875, 0.375, 0.375],
        [0.625, 0.125, 0.625, 0.125, 0.125],
        [0.125, 0.625, 0.125, 0.625, 0.625]],
<BLANKLINE>
       [[0.75 , 0.25 , 0.25 , 0.75 , 0.75 ],
        [0.25 , 0.75 , 0.75 , 0.25 , 0.25 ],
        [0.375, 0.125, 0.125, 0.375, 0.375],
        [0.875, 0.625, 0.625, 0.875, 0.875],
        [0.625, 0.875, 0.875, 0.625, 0.625],
        [0.125, 0.375, 0.375, 0.125, 0.125]]])
>>> print(qmcseqcl.lattice_rshift.__doc__)
Random shift for lattice points
<BLANKLINE>
Args:
    r (np.uint64): replications
    n (np.uint64): points
    d (np.uint64): dimension
    r_x (np.uint64): replications in x
    x (np.ndarray of np.double): lattice points of size r_x*n*d
    shifts (np.ndarray of np.double): random shifts of size r*d
    xr (np.ndarray of np.double): pointer to point storage of size r*n*d
>>> r_x = r 
>>> r = 2*r_x
>>> rng = np.random.Generator(np.random.SFC64(7))
>>> shifts = rng.random((r,d))
>>> xr = np.empty((r,n,d),dtype=np.float64)
>>> time_perf,time_process = qmcseqcl.lattice_rshift(r,n,d,r_x,x,shifts,xr,**kwargs)
>>> xr
array([[[0.79386058, 0.33727432, 0.1191824 , 0.40212985, 0.44669968],
        [0.29386058, 0.83727432, 0.6191824 , 0.90212985, 0.94669968],
        [0.41886058, 0.46227432, 0.7441824 , 0.52712985, 0.57169968],
        [0.91886058, 0.96227432, 0.2441824 , 0.02712985, 0.07169968],
        [0.66886058, 0.71227432, 0.9941824 , 0.77712985, 0.82169968],
        [0.16886058, 0.21227432, 0.4941824 , 0.27712985, 0.32169968]],
<BLANKLINE>
       [[0.85605352, 0.88025643, 0.38630282, 0.3468363 , 0.8076251 ],
        [0.35605352, 0.38025643, 0.88630282, 0.8468363 , 0.3076251 ],
        [0.48105352, 0.75525643, 0.26130282, 0.9718363 , 0.4326251 ],
        [0.98105352, 0.25525643, 0.76130282, 0.4718363 , 0.9326251 ],
        [0.73105352, 0.50525643, 0.01130282, 0.2218363 , 0.6826251 ],
        [0.23105352, 0.00525643, 0.51130282, 0.7218363 , 0.1826251 ]],
<BLANKLINE>
       [[0.9528797 , 0.97909681, 0.8866783 , 0.50220658, 0.59501765],
        [0.4528797 , 0.47909681, 0.3866783 , 0.00220658, 0.09501765],
        [0.5778797 , 0.10409681, 0.5116783 , 0.62720658, 0.72001765],
        [0.0778797 , 0.60409681, 0.0116783 , 0.12720658, 0.22001765],
        [0.8278797 , 0.35409681, 0.7616783 , 0.87720658, 0.97001765],
        [0.3278797 , 0.85409681, 0.2616783 , 0.37720658, 0.47001765]],
<BLANKLINE>
       [[0.31269008, 0.29826852, 0.96308655, 0.55983568, 0.60383675],
        [0.81269008, 0.79826852, 0.46308655, 0.05983568, 0.10383675],
        [0.93769008, 0.17326852, 0.83808655, 0.18483568, 0.22883675],
        [0.43769008, 0.67326852, 0.33808655, 0.68483568, 0.72883675],
        [0.18769008, 0.92326852, 0.58808655, 0.43483568, 0.47883675],
        [0.68769008, 0.42326852, 0.08808655, 0.93483568, 0.97883675]]])
